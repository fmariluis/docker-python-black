#!/bin/sh
#
# This script fetches the latest https://github.com/psf/black release and, if
# an image for that release does not yet exist on Docker Hub, builds and pushes
# a new image for that release.
#
# It is invoked by a scheduled GitHub Action to automatically push new docker
# images for each new black release.

set -eu

DOCKER_REPO="${DOCKER_REPO:-"mccutchen/python-black"}"

# Fetch latest black release from the GitHub API.
if [ "${BLACK_VERSION:-}" = "" ]; then
    BLACK_VERSION="$(curl -s https://api.github.com/repos/psf/black/releases/latest | jq -r .tag_name)"
    if [ "${BLACK_VERSION}" = "" ]; then
        echo "Could not get latest release from https://api.github.com/repos/psf/black/releases/latest"
        exit 1
    fi
fi

# Fetch a temporary docker auth token if necessary (the automated workflow
# includes its own dedicated token).
if [ "${DOCKERHUB_TOKEN:-}" = "" ]; then
    DOCKERHUB_TOKEN=$(curl -s "https://auth.docker.io/token?scope=repository:${DOCKER_REPO}:pull&service=registry.docker.io" | jq -r '.token')
    if [ "${DOCKERHUB_TOKEN}" = "" ]; then
        echo "Could not get docker auth token for repo ${DOCKER_REPO}"
        exit 1
    fi
fi

# See if an image for this black release already exists. If so, we can exit
# early, no more work to do.
DOCKER_IMAGE_DIGEST_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $DOCKERHUB_TOKEN" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" "https://registry.hub.docker.com/v2/${DOCKER_REPO}/manifests/${BLACK_VERSION}")
if [ "${DOCKER_IMAGE_DIGEST_CODE}" = "200" ]; then
    echo "Image ${DOCKER_REPO}:${BLACK_VERSION} already exists, skipping."
    exit 0
fi

# Otherwise, build and push a new image for the new black release.
echo "Building verion ${BLACK_VERSION} as ${DOCKER_REPO}:${BLACK_VERSION} ..."
docker build \
    -t "${DOCKER_REPO}:${BLACK_VERSION}" \
    -t "${DOCKER_REPO}:latest" \
    --build-arg BLACK_VERSION="${BLACK_VERSION}" \
    "."

echo "Pushing verion ${BLACK_VERSION} as ${DOCKER_REPO}:${BLACK_VERSION} ..."
docker push "${DOCKER_REPO}:${BLACK_VERSION}"

echo "Pushing verion ${BLACK_VERSION} as ${DOCKER_REPO}:latest ..."
docker push "${DOCKER_REPO}:latest"
